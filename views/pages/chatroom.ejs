<!DOCTYPE html>
<html>
 
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=0">
 
    <link href='https://fonts.googleapis.com/css?family=Exo+2:400,900italic,900,800italic,800,700italic,700,600italic,600,500italic,500,400italic,300italic,200italic,200,100italic,100,300' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Lato:400,900italic,900,800italic,800,700italic,700,600italic,600,500italic,500,400italic,300italic,200italic,200,100italic,100,300' rel='stylesheet' type='text/css'>
 
    <link rel="stylesheet" href="/static/bootstrap/bootstrap.min.css">
    <link rel="stylesheet" href="/static/css/index.css">
    <link rel="stylesheet" href="/static/css/chat.css">
    <title>Circle</title>
    
    <style>
      
      .tc-card-name{
        font-weight:normal;
      }
      
      #friend-card{
        position:relative;
        width:320px;
        height:430px;
        left:50%;
        margin-left:-160px;
      }
      
      /* The Modal (background) */
.modal {
    display: none; /* Hidden by default */
    position: fixed; /* Stay in place */
    z-index: 1000; /* Sit on top */
    padding-top: 100px; /* Location of the box */
    left: 0;
    top: 0;
    width: 100%; /* Full width */
    height: 100%; /* Full height */
    overflow: auto; /* Enable scroll if needed */
    background-color: rgb(0,0,0); /* Fallback color */
    background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
}
 
</style>
</head>
<script src="static/js/jquery-1.11.3.min.js"></script>
<script src="/static/bootstrap/bootstrap.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script src="static/js/md5.min.js"></script>
<script src="static/js/hammer.min.js"></script>
<script src="static/js/tindercards.js"></script>
<script>
    function htmlDecode(input) {
        var e = document.createElement('div');
        e.innerHTML = input;
        return e.childNodes.length === 0 ? "" : e.childNodes[0].nodeValue;
    }
    messages = <%-messages%>; //global var
    console.log(messages);
 
    var socket = io();
 
 
    var userId = "<%-userId%>";
    // var hashedId = md5(userId);
 
    var friend_list = [];
	var emailToProfileList=<%- emailToProfileList %>;
    //alert (JSON.stringify(emailToProfileList));
 
    <% for(var i=0; i<friend_list.length; i++) {%>
		//friend_list.push("<%= friend_list[i] %>");
		friend_list.push({roomId: "<%= friend_list[i] %>",  userId: "<%= room_name_mapping[i] %>", lastMsg: "", lastMsgTime: ""});
    <% } %>
 
 
    for (var i = 0; i < friend_list.length; i++)
        socket.emit('subscribe', friend_list[i].roomId);
 
    socket.on('broadcast', function(data) {
        //document.body.innerHTML = '';
        //document.write(data.description);
        //alert(data.description);
        var input = data.content;
        //check if hash(userId)==hashedId;
        //var hashedId = CryptoJS.MD5(userId).toString();
        var hashedId = md5(userId);
 
        console.log("input=" + input);
        console.log("hashedID=" + hashedId);
 
        //   alert(input);
        //   alert(hashedId);

        if (input === hashedId) {
            if (window.confirm("Somebody has added you! Join the conversation?")) {
                location.reload();
            }
        }
    });
 
    socket.on('userSet', function(data) {
        user = data.username;
    });
 
    function sendMessage() {
        var msg = document.getElementById('message').value;
		
		if (msg.trim().length > 0)
		{
			var room_id = document.getElementById('room_id').value;
			//console.log("room_id="+room_id);
			// console.log("msg="+msg);
	 
			if (msg) {
				socket.emit('send', {
					room: room_id,
					message: sanitize(msg),
					userId: userId
				});
			}
		}
 
        $('#message').val('').focus(); // clear the message field and set focus
    }
	
	function getProfileByUserId(userId) // email
	{
		return emailToProfileList[userId];
	}
	
	function getLastMsg(friend) // roomId
    {
        var lastMsg = messages[friend][(messages[friend]).length -1];
        return lastMsg;
    }
    
	function compare(a,b) {
		
		var t1 = new Date(a.lastMsgTime);
		var t2 = new Date(b.lastMsgTime);
		
		if (t1 > t2)
			return -1;
		if (t1 < t2)
			return 1;
	
	/*
		if (a.lastMsgTime > b.lastMsgTime)
			return -1;
		if (a.lastMsgTime < b.lastMsgTime)
			return 1;
					*/
			
		return 0;
	}
	
	function imgError(image) {
		image.onerror = "";
		image.src = "static/img/avatar-default.png";
		return true;
	}
	
	function addZero(i) {
    if (i < 10) {
        i = "0" + i;
    }
    return i;
	}
	
    function updateChatRoomList()
    {	
		// get last msg info
		for (var i = 0; i < friend_list.length; i++) { 
			var lastMsg = getLastMsg(friend_list[i].roomId);
			friend_list[i].lastMsg = lastMsg["msg"];
			friend_list[i].lastMsgTime = lastMsg["time"];
		}
		
		// sort array by last msg time
		friend_list.sort(compare);
	
		var htmlString = '<li class="active"><a class="list-section" href="#homeSubmenu" data-toggle="collapse" aria-expanded="true">My Friends</a><ul class="list-unstyled collapse show" id="homeSubmenu">';
						
		// update chatroom friend list order and last msg
		for (var i = 0; i < friend_list.length; i++) {
			var lastMsgTime = new Date(friend_list[i].lastMsgTime);
			lastMsgTime = addZero(lastMsgTime.getHours()) + ':' + addZero(lastMsgTime.getMinutes()); //toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: false });
			
			htmlString += '<li><a class="link-btn" href="javascript:selectFriend(\'' + friend_list[i].roomId + '\')">'
			htmlString += '<img class="nav-friend-avatar img-circle" src="' + getProfileByUserId(friend_list[i].userId).picId + '" onerror="imgError(this)" onclick="getFriendProfile(\''+ friend_list[i].userId + '\')"><div class="nav-friendlist-row"><label class="nav-friendlist-name">' + getProfileByUserId(friend_list[i].userId).nickname;
			htmlString += '</label><div class="last-message">' + friend_list[i].lastMsg;
			htmlString += '<span class="last-message-time">' + lastMsgTime + '</span></div></div></a></li>';
		}
		
		htmlString += '</ul></li>';

		$('#chatroom-list').html(htmlString);
    }
	
    socket.on('newmsg', function(data) {
        //if (user) {
        //console.log(data.user + data.message);
        console.log("room_id=" + data.room);
        var newMsg = new Object();
        newMsg.from = data.userId;
        newMsg.to = "";
        newMsg.msg = data.message;
		newMsg.time = data.time;
 
        //added a field "time" to data; so that the messages can be sorted
        //alert(data.time);
        updateChatArea(newMsg, data.room);
		updateChatRoomList();
    })
 
    function updateChatArea(newMsg, room) {
        var curRoom = $("#room_id").val();
 
        messages[room].push(newMsg);
        //var oldText = $('#room_id option[value="' + room + '"]').text();
        //$('#room_id option[value="' + room + '"]').text(oldText + " new msg!");
        changeChatRoom();
    }
 
    function selectFriend(friend) {
        $("#room_id").val(friend);
        changeChatRoom();
    }
 
    
    function sanitize(_str){
        
        var entityMap = {
          '&': '&amp;',
          '<': '&lt;',
          '>': '&gt;',
          '"': '&quot;',
          "'": '&#39;',
          '/': '&#x2F;',
          '`': '&#x60;',
          '=': '&#x3D;'
        };
        return String(_str).replace(/[&<>"'`=\/]/g, function (s) {
            return entityMap[s];
        });
        
        //return _str;
         $("#tmp").text(_str);
         var escaped=$("#tmp").html();
         
         $("#tmp").text("");
         return "->"+escaped;
        
    }
    
    
    function changeChatRoom() {
        var curRoom = $("#room_id").val();
        console.log(curRoom);
        <!--$("#message-container").text(JSON.stringify(messages[curRoom]));-->
 
        var content = "";
 
        if (typeof messages[curRoom] != 'undefined')
        {
			var curDate = '';
		
            for (i = 0; i < messages[curRoom].length; ++i) {
 
                msgFrom = messages[curRoom][i]["from"];
				msgDateTime = new Date(messages[curRoom][i]["time"]);
                msgDate = msgDateTime.getFullYear() + '/' + (msgDateTime.getMonth() + 1) + '/' + msgDateTime.getDate();
                msgTime = addZero(msgDateTime.getHours()) + ':' + addZero(msgDateTime.getMinutes());
				//msgDateTime.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: false });
                
                if (!(curDate === msgDate))
                {
                    curDate = msgDate;
                    content += '<div class="chat_chatboxdate">' +
                        curDate + '</div>';
                }

                if (msgFrom == userId) {
                    content += '<div class="chat_chatboxmessage chat_self">' +
                        messages[curRoom][i]["msg"] + '<span class="chat_chatboxtime">' + msgTime + '</span></div>';
 
                } else {
                    content += '<div class="chat_chatboxmessage">' +
                        messages[curRoom][i]["msg"] + '<span class="chat_chatboxtime">' + msgTime + '</span></div>';
                }
            }
			
 
            $("#chat-top-title").html(getProfileByUserId($("#room_id option:selected").text().trim()).nickname); //+ $("#room_id option:selected").text());
 
            $("#message-container").html(content);
			
			$("#message-container").scrollTop($("#message-container")[0].scrollHeight);
 
            console.log(messages[curRoom]);
        }
 
    }
 
</script>
 
<body>
<!-- Logout Modal -->
<div class="modal fade" id="logoutModal" tabindex="-1" role="dialog" aria-labelledby="logoutModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-body">
        <h4><center>Confirm to Logout?</center></h4>
      </div>
      <div class="modal-footer">
        <center><button type="button" onclick="location.href='logout'" class="btn btn-primary btn-lg">Yes</button>
		<button type="button" class="btn btn-secondary btn-lg" data-dismiss="modal">No</button></center>
      </div>
    </div>
  </div>
</div>

<!-- UploadAvatar Modal -->
<div class="modal fade" id="uploadAvatarModal" tabindex="-1" role="dialog" aria-labelledby="logoutModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-body">
        <h4><center>Upload you profile picture to let others know you!</center></h4>
      </div>
      <div class="modal-footer">
        <center><button id="btnUpdateAvatar" type="button" class="btn btn-primary btn-lg">Yes</button>
		<button type="button" class="btn btn-secondary btn-lg" data-dismiss="modal">No</button></center>
      </div>
    </div>
  </div>
</div>

    <!-- user info -->
    <div class="wrapper">
        <nav id="sidebar">
            <div class="sidebar-header">
               <img id="nav-logo" class="pointer" src="static/img/logo.svg">
            </div>
 
            <ul class="list-unstyled components">
				<p>
                   <img id="my-avatar" src="<%= picURL %>" onerror="imgError(this);" onclick='getMyProfile("<%= picURL %>")' class="img-circle pointer">

				   <span>
				   <label id="my-id" class="pointer"><%=userId%></label>
				   <button type="button" id="btnLogout" class="btn btn-primary" data-toggle="modal" data-target="#logoutModal">
						<i class="glyphicon glyphicon glyphicon-log-out"></i>
					</button>
					</span>
				</p>
				<div id="chatroom-list">

				</div>
                <li>
                    <a href="#" class="list-section">About Circle</a>
                </li>
            </ul>
 
            <ul class="list-unstyled CTAs">
                <script>
                // Get the modal
						function getMyProfile(picURL){							
								var cards = [];
									var faculty="";
									var description="";
									
									//var friendName=getProfileByUserId(friend).nickname;
									//var friendFaculty=getProfileByUserId(friend).faculty;
									//var friendDesc=getProfileByUserId(friend).description;
									
									//if (typeof friendFaculty != 'undefined' && friendFaculty.trim().length > 0)
									//{
									//	faculty = "(" + friendFaculty + ")";
									//}
									
									//if (typeof friendDesc != 'undefined' && friendDesc.trim().length > 0)
									//{
									//	description = friendDesc;
									//}
									
                                    cards.push(new Tindercardsjs.card(3, 0, '', '', '', picURL, ''));                       
                                
                                
                                //alert(str) ;
                                //console.log(str);
                                
                                $('#myModal').show();
 
                                // Render cards
                                Tindercardsjs.render(cards, $('#friend-card'), 'false', function (event) {
                                  console.log('Swiped ' + event.direction + ', cardid is ' + event.cardid + ' and target is:');
                                  console.log(event.card);
                                });
                        }
						
							function getFriendProfile(friend){							
								var cards = [];
									var faculty="";
									var description="";
									
									var friendName=getProfileByUserId(friend).nickname;
									var friendFaculty=getProfileByUserId(friend).faculty;
									var friendDesc=getProfileByUserId(friend).description;
									
									if (typeof friendFaculty != 'undefined' && friendFaculty.trim().length > 0)
									{
										faculty = "(" + friendFaculty + ")";
									}
									
									if (typeof friendDesc != 'undefined' && friendDesc.trim().length > 0)
									{
										description = friendDesc;
									}
									
                                    cards.push(new Tindercardsjs.card(2, 0, friendName, faculty, description, getProfileByUserId(friend).picId, ''));                       
                                
                                
                                //alert(str) ;
                                //console.log(str);
                                
                                $('#myModal').show();
 
                                // Render cards
                                Tindercardsjs.render(cards, $('#friend-card'), 'false', function (event) {
                                  console.log('Swiped ' + event.direction + ', cardid is ' + event.cardid + ' and target is:');
                                  console.log(event.card);
                                });
                        }
				
                        function getNewFriends(){
							if ($('#my-avatar').attr('src') === 'static/img/avatar-default.png')
							{
								$('#uploadAvatarModal').modal('show');
								//$("#frmUpdateMyAvatar").submit();
								return;
							}
							
                            var cards = [];
                            console.log("userT:"+$("#userT").val());
                            $.get("/new_friend_list", {
                                t: $("#userT").val()
                            })
                            .done(function(data) {
 
                                var str="";
                                for (var i = 0; i < data.length; i++) {
                                    //str = str+"Potential friend "+ i +" 's data:\n" 
                                    //str = str + JSON.stringify( data[i] ) + "\nlink to add him as friend: /new_friend_select?identity="+data[i].identity+"&t="+$("#userT").val();
                                    //str=str+"\n\n";
									var faculty = "";
									var desc = "";
									
									if (typeof data[i].faculty != 'undefined' && data[i].faculty.trim().length > 0)
									{
										faculty = "(" + data[i].faculty + ")";
									}
									
									if (typeof data[i].description != 'undefined' && data[i].description.trim().length > 0)
									{
										desc = data[i].description;
									}
									
                                    cards.push(new Tindercardsjs.card(1, data[i].identity, data[i].name, faculty, desc, data[i].picURL, '/new_friend_select?identity='+data[i].identity+'&t='+$("#userT").val()));                       
                                }
                                
                                //alert(str) ;
                                //console.log(str);
                                
                                $('#myModal').show();
 
                                // Render cards
                                Tindercardsjs.render(cards, $('#friend-card'), 'true', function (event) {
                                  console.log('Swiped ' + event.direction + ', cardid is ' + event.cardid + ' and target is:');
                                  console.log(event.card);
                                });
                            });
                        }
                        
 
                </script>
                
                 <form id="frmUpdateMyAvatar" action="/update_profile_page" method="GET">
                    <input type="hidden"  name="picId" value="<%= picId%>">
                    <!--<li><input type="submit" class="btn btn-info btn-lg" value="Change profile pic"></li>-->
                 </form>
                 
                  <form id="frmUpdateMyInfo" action="/update_profile_data_page" method="GET">
                    <input type="hidden"  name="token" value="<%= token%>">
                    <!--<li><input type="submit" class="btn btn-info btn-lg" value="Change profile data"></li>-->
                 </form>
                
                
                <form id="frmSearchNewFriend" action="/new_friend" method="post">
                    <input type="hidden" id="userT" name="token" value="<%=token %>">
                    <li><input id="matchNewFriends" type="button" onclick="getNewFriends()" class="btn btn-info btn-lg" value="Match New Friends!"></li>
                </form>
            </ul>
 
            <select style="display: none;" id="room_id" onchange="changeChatRoom()">
                <% for(var i=0; i<friend_list.length; i++) {%>
                     <option value="<%= friend_list[i] %>">
                        <!--<%= room_name_mapping[i]+" "+friend_list[i] %>-->
                        <%= room_name_mapping[i]%>
                     </option>
                <% } %>
            </select>
        </nav>
 
        <div id="loader" style="display: none;"></div>
        <div id="loader-text" style="display: none;">Searching...</div>
        <div id="content">
            <div class="chat-top">
                <button type="button" id="sidebarCollapse" class="btn btn-info navbar-btn">
                <i class="glyphicon glyphicon-align-left"></i>
            </button>
 
                <div id="chat-top-title" class="chat-top__title chat-top__title--messaging" style="display: block;"></div>
            </div>
            <!-- The Modal -->
            <div id="myModal" class="modal">
              <!-- Modal content -->
              <span class="close-friend-card pointer" id="closeModal">&times;</span>
              <div class="modal-content-friend-card">
                <div id="friend-card"></div>
              </div>
 
            </div>
 
 
            <div class="chat-canvas" id="message-container">
            </div>
 
            <div id="chat-input" class="chat-input">
                <div class="chat-input-text">
                    <textarea class="chat-input-text__field" id="message" autofocus></textarea>
                </div>
                <label id="btnSendMsg" class="chat-input-send" type="button"></label>
            </div>
        </div>
    </div>
 
 
    <script>
        $(document).ready(function() {
            
            $('#frmSearchNewFriend').submit(function(event) {
                event.preventDefault();
                $('#sidebar, #content, #chat-input').toggleClass('active');
 
                var form = this;
                document.getElementById("content").style.display = "none";
                document.getElementById("loader").style.display = "block";
                document.getElementById("loader-text").style.display = "block";
                setTimeout(function() {
                    document.getElementById("loader").style.display = "none";
                    document.getElementById("loader-text").style.display = "none";
                    document.getElementById("content").style.display = "block";
                    form.submit();
                }, 3000); // in milliseconds
            });
			
			updateChatRoomList();
 
            $('#sidebarCollapse, #nav-logo').on('click', function() {
                $('#sidebar, #content, #chat-input').toggleClass('active');
                $('.collapse.in').toggleClass('in');
                $('a[aria-expanded=true]').attr('aria-expanded', 'false');
            });
			
			$('.chat-canvas').on('click', function() {
				$('#sidebar, #content, #chat-input').addClass('active');
			});
			
			//$("#my-avatar").click(function() {
				//$("#frmUpdateMyAvatar").submit();
			//});
			
			$(".nav-friendlist-row").click(function() {
			
				$('#sidebar, #content, #chat-input').toggleClass('active');
				$('.collapse.in').toggleClass('in');
				$('a[aria-expanded=true]').attr('aria-expanded', 'false');
			});
			
			$("#my-id").click(function() {
				$("#frmUpdateMyInfo").submit();
			});
 
            $('#btnSendMsg').on('click', function() {
                sendMessage();
            });
 
            changeChatRoom();
            console.log("roomId=" + document.getElementById('room_id').value);
            
            // When the user clicks on <span> (x), close the modal
            $('#closeModal').on('click', function() {
                $('#friend-card').empty(); 
                $('#myModal').hide();
            });
			
			// When the user clicks on <span> (x), close the modal
            $('#closeModal').on('click', function() {
                $('#friend-card').empty(); 
                $('#myModal').hide();
            });
			
			$('#btnUpdateAvatar').on('click', function() {
				$("#frmUpdateMyAvatar").submit();
            });
        });

    </script>
 
</body>
 
</html>
